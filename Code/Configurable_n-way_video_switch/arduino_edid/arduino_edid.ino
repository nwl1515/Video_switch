
#include "pins_arduino.h"

#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))

#define TW_STATUS_MASK    (_BV(TWS7)|_BV(TWS6)|_BV(TWS5)|_BV(TWS4)| _BV(TWS3))

#define TW_STATUS   (TWSR & TW_STATUS_MASK)

uint8_t addr;

uint8_t edid[256] = {
      0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x3A, 0xEC, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 
      0x06, 0x1A, 0x01, 0x03, 0x80, 0x60, 0x39, 0x78, 0x06, 0xEE, 0x91, 0xa3, 0x54, 0x4c, 0x99, 0x26, 
      0x0f, 0x50, 0x54, 0x00, 0x00, 0x00, 0x81, 0xC0, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
      0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1D, 0x00, 0x72, 0x51, 0xD0, 0x1E, 0x20, 0x6E, 0x28,
      0x55, 0x00, 0xC1, 0x37, 0x32, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x43, 0x6F, 0x6E,
      0x66, 0x20, 0x32, 0x2F, 0x36, 0x2D, 0x6E, 0x2D, 0x53, 0x77, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x30,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x00, 0x00, 0x00, 0xFE,
      0x00, 0x4E, 0x69, 0x6B, 0x6F, 0x6C, 0x61, 0x6A, 0x20, 0x4C, 0x65, 0x74, 0x68, 0x0A, 0x01, 0xC5,
      0x02, 0x03, 0x0C, 0x01, 0x41, 0x84, 0x65, 0x03, 0x0C, 0x00, 0x10, 0x00, 0x01, 0x1D, 0x00, 0x72, 
      0x51, 0xD0, 0x1E, 0x20, 0x6E, 0x28, 0x55, 0x00, 0xC1, 0x37, 0x32, 0x00, 0x00, 0x1E, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83
};

void init_spi(uint8_t address)
{
  digitalWrite(SDA, 1);
  digitalWrite(SCL, 1);
  TWAR = address << 1;
  cbi(TWSR, TWPS0);
  cbi(TWSR, TWPS1);
  TWBR = ((F_CPU / 100000L) -16)/ 2;
  TWCR = 0b01000101; //(_BV(TWEN) | _BV(TWIE) | _BV(TWEA);)  
}

void reply() // reply with ack
{
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
}

ISR(TWI_vect)
{
  //Serial.print("In isr");
  //Serial.print(TW_STATUS, HEX);
  switch(TW_STATUS)
  {
    // Receiver
    case 0x60:  // Addressed with write - 0xA0, data-address to EDID.
        reply();
        break;
       
    case 0x80: // Data from 0x60
        addr = TWDR;    // Address in EDID
        reply();
        break; 

    case 0xA0: // Repeated start condition
         reply(); // Release bus
         break;

    // Transmit
      case 0xA8: // Addressed with read - 0xA1, data from EDID
      case 0xB8:  // continue with next data  
        TWDR = edid[addr];
        addr++;
        reply();
        break;

      case 0xC0: // just ack, done for now.
      case 0xC8:
         reply();
         break;  
  }  
}

void setup()
{  
  init_spi(0x50);
}

void loop()
{
   
}

